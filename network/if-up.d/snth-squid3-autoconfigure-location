#!/bin/sh -xe

current_location=
if ip route show | head -n 1 | grep -q '^default via 10\.15'
then
    # It's 10.155.* in AMS9, 10.156.* in AMS11. Matching 10.15*. is
    # probably a good heuristic.
    current_location=office
elif ip route show | grep tun0 | head -n 1 | grep -q 'via 192\.168\.42'
then
    # The address for the tun0 on the bkbastion is 192.168.42.1
    current_location=office_vpn
elif ip route show | grep dns0 | grep -q '^172\.31\.255\.0'
then
    # We have the iodine tunnel active
    current_location=iodine
else
    current_location=elsewhere
fi

configured_location=
if readlink /etc/squid/squid.conf.d/location.conf
then
    configured_location=$(readlink /etc/squid/squid.conf.d/location.conf)
else
    configured_location=unconfigured
fi

# Change the GNOME settings for what proxy setting we should be
# using. auto=office, none=elsewhere. Yes that odd quoting
# convention is needed. Also dconf even though it's a CLI tool
# needs the loving embrace of X to work.
#
# This is not guarded by checking for our current config just for good
# measure.
case "$current_location" in
    office)
        echo $0: Setting gnome-control-center/network proxy settings to auto
        sudo -u avar DISPLAY=:0 dconf write /system/proxy/mode "'auto'"
        ;;
    office_vpn)
        echo $0: Setting gnome-control-center/network proxy settings to none
        sudo -u avar DISPLAY=:0 dconf write /system/proxy/mode "'none'"

        # The OpenVPN erroneously leaves the nameserver entry for my
        # WiFi on, which will cause issues with accessing all sorts of
        # internal sites that also have external DNS. I can't find out
        # how to change OpenVPN to turn ito ff, so just hack it out of
        # there.
        if grep -q '^nameserver 192\.168\.' /etc/resolv.conf
        then
            echo "$0: We have a 192.168.* nameserver in resolv.conf. Going to remove it"
            perl -pi  -e 's[^nameserver 192\.168\..*$][]s' /etc/resolv.conf
            if grep -q '^nameserver 192\.168\.' /etc/resolv.conf
            then
                echo "$0: We have removed the 192.168.* nameserver in resolv.conf"
            else
                echo "$0: PANIC: Failed to remove the 192.168.* nameserver in resolv.conf!"
            fi    
        else
            echo "$0: We have no 192.168.* nameserver in resolv.conf. Were expecting it, but whatever"
        fi
        ;;
    iodine)
        echo $0: Setting gnome-control-center/network proxy settings to manual
        sudo -u avar DISPLAY=:0 dconf write /system/proxy/mode "'manual'"
        # Set the socks proxy to 9999 because we'll be using this with
        # ssh -D 9999
        sudo -u avar DISPLAY=:0 dconf write /system/proxy/socks/host "'localhost'"
        sudo -u avar DISPLAY=:0 dconf write /system/proxy/socks/port 9999
        for type in http https
        do
            sudo -u avar DISPLAY=:0 dconf write /system/proxy/$type/host "''"
            sudo -u avar DISPLAY=:0 dconf write /system/proxy/$type/port 0
        done
        ;;
    elsewhere)
        echo $0: Setting gnome-control-center/network proxy settings to none
        sudo -u avar DISPLAY=:0 dconf write /system/proxy/mode "'none'"
        ;;
    *)
        echo "$0: PANIC: Don't know about location $current_location"
        exit 1
        ;;
esac

if echo $configured_location | grep -q "^$current_location$"
then
    echo $0: Our location $current_location is already configured in squid as $configured_location
    # We're already at the configured location, do nothing
    exit 0
else
    echo $0: Changing location from $configured_location to $current_location
    cd /etc/squid/squid.conf.d
    ln -sfv $current_location.conf location.conf
    systemctl reload squid
fi
